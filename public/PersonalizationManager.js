/**\n * PersonalizationManager.js\n * Advanced Personalization System for WhatsApp Enhanced v3\n * Handles token replacement, contact management, and bulk messaging\n */\n\nclass PersonalizationManager {\n    constructor() {\n        this.tokens = [\n            { name: 'name', description: 'Contact name' },\n            { name: 'phone', description: 'Phone number' },\n            { name: 'email', description: 'Email address' },\n            { name: 'company', description: 'Company name' },\n            { name: 'city', description: 'City' },\n            { name: 'country', description: 'Country' },\n            { name: 'custom', description: 'Custom field' }\n        ];\n        \n        this.contacts = [];\n        this.templates = [];\n        this.selectedContacts = new Set();\n        this.messageStats = {\n            tokenCount: 0,\n            recipientCount: 0,\n            estimatedMessages: 0\n        };\n        \n        this.init();\n    }\n\n    init() {\n        this.bindEvents();\n        this.setupTokenButtons();\n        this.loadTemplates();\n        this.updateStats();\n    }\n\n    bindEvents() {\n        // Token buttons\n        document.addEventListener('click', (e) => {\n            if (e.target.classList.contains('token-btn') || e.target.closest('.token-btn')) {\n                const btn = e.target.classList.contains('token-btn') ? e.target : e.target.closest('.token-btn');\n                this.insertToken(btn.dataset.token);\n            }\n        });\n\n        // Message textarea\n        const messageTextarea = document.getElementById('personalizedMessage');\n        if (messageTextarea) {\n            messageTextarea.addEventListener('input', () => {\n                this.updatePreview();\n                this.updateStats();\n            });\n        }\n\n        // Recipient type selector\n        const recipientType = document.getElementById('recipientType');\n        if (recipientType) {\n            recipientType.addEventListener('change', () => {\n                this.handleRecipientTypeChange();\n                this.updateStats();\n            });\n        }\n\n        // Contact selector\n        const contactSelector = document.getElementById('contactSelector');\n        if (contactSelector) {\n            contactSelector.addEventListener('change', () => {\n                this.updatePreview();\n                this.updateStats();\n            });\n        }\n\n        // Send button\n        const sendBtn = document.getElementById('sendPersonalizedBtn');\n        if (sendBtn) {\n            sendBtn.addEventListener('click', () => {\n                this.sendPersonalizedMessages();\n            });\n        }\n    }\n\n    setupTokenButtons() {\n        const tokenButtons = document.getElementById('tokenButtons');\n        if (!tokenButtons) return;\n\n        tokenButtons.innerHTML = '';\n        this.tokens.forEach(token => {\n            const btn = document.createElement('button');\n            btn.className = 'btn btn-outline-primary btn-sm me-1 mb-1 token-btn';\n            btn.dataset.token = `{{${token.name}}}`;\n            btn.innerHTML = `<i class=\"fas fa-plus-circle me-1\"></i>{{${token.name}}}`;\n            btn.title = token.description;\n            tokenButtons.appendChild(btn);\n        });\n    }\n\n    insertToken(token) {\n        const textarea = document.getElementById('personalizedMessage');\n        if (!textarea) return;\n\n        const start = textarea.selectionStart;\n        const end = textarea.selectionEnd;\n        const text = textarea.value;\n        \n        textarea.value = text.substring(0, start) + token + text.substring(end);\n        textarea.focus();\n        textarea.setSelectionRange(start + token.length, start + token.length);\n        \n        this.updatePreview();\n        this.updateStats();\n    }\n\n    handleRecipientTypeChange() {\n        const recipientType = document.getElementById('recipientType').value;\n        const selectors = {\n            single: document.getElementById('singleSelector'),\n            multiple: document.getElementById('multipleSelector'),\n            all: document.getElementById('allSelector')\n        };\n\n        // Hide all selectors\n        Object.values(selectors).forEach(selector => {\n            if (selector) selector.style.display = 'none';\n        });\n\n        // Show selected selector\n        if (selectors[recipientType]) {\n            selectors[recipientType].style.display = 'block';\n        }\n\n        // Handle multiple contacts selector\n        if (recipientType === 'multiple') {\n            this.populateMultipleContactsSelector();\n        }\n    }\n\n    populateMultipleContactsSelector() {\n        const container = document.getElementById('multipleContactsSelector');\n        if (!container) return;\n\n        container.innerHTML = '';\n        this.contacts.forEach(contact => {\n            const div = document.createElement('div');\n            div.className = 'form-check';\n            \n            const checkbox = document.createElement('input');\n            checkbox.className = 'form-check-input';\n            checkbox.type = 'checkbox';\n            checkbox.id = `contact_${contact.id}`;\n            checkbox.value = contact.id;\n            checkbox.addEventListener('change', () => {\n                if (checkbox.checked) {\n                    this.selectedContacts.add(contact.id);\n                } else {\n                    this.selectedContacts.delete(contact.id);\n                }\n                this.updateStats();\n            });\n            \n            const label = document.createElement('label');\n            label.className = 'form-check-label';\n            label.htmlFor = `contact_${contact.id}`;\n            label.textContent = contact.name || contact.number;\n            \n            div.appendChild(checkbox);\n            div.appendChild(label);\n            container.appendChild(div);\n        });\n    }\n\n    updatePreview() {\n        const messageText = document.getElementById('personalizedMessage').value;\n        const preview = document.getElementById('messagePreview');\n        \n        if (!preview) return;\n\n        if (!messageText.trim()) {\n            preview.innerHTML = '<p class=\"text-muted mb-0\">Preview will appear here...</p>';\n            return;\n        }\n\n        let sampleContact = {\n            name: 'John Doe',\n            phone: '+1234567890',\n            email: 'john@example.com',\n            company: 'Example Corp',\n            city: 'New York',\n            country: 'USA',\n            custom: 'VIP Customer'\n        };\n\n        const personalizedText = this.replaceTokens(messageText, sampleContact);\n        preview.innerHTML = `<div class=\"border-start border-primary border-3 ps-2\">${personalizedText}</div>`;\n    }\n\n    replaceTokens(text, contact) {\n        let result = text;\n        \n        this.tokens.forEach(token => {\n            const tokenPattern = new RegExp(`{{${token.name}}}`, 'g');\n            const value = contact[token.name] || `[${token.name}]`;\n            result = result.replace(tokenPattern, value);\n        });\n        \n        return result;\n    }\n\n    updateStats() {\n        const messageText = document.getElementById('personalizedMessage')?.value || '';\n        \n        // Count tokens\n        const tokenMatches = messageText.match(/{{\\w+}}/g) || [];\n        this.messageStats.tokenCount = new Set(tokenMatches).size;\n        this.messageStats.recipientCount = this.contacts.length;\n        this.messageStats.estimatedMessages = messageText.trim() ? this.messageStats.recipientCount : 0;\n        \n        // Update UI\n        this.updateStatsDisplay();\n    }\n\n    updateStatsDisplay() {\n        const elements = {\n            tokenCount: document.getElementById('tokenCount'),\n            recipientCount: document.getElementById('recipientCount'),\n            estimatedMessages: document.getElementById('estimatedMessages')\n        };\n        \n        Object.entries(elements).forEach(([key, element]) => {\n            if (element) {\n                element.textContent = this.messageStats[key];\n            }\n        });\n    }\n\n    async sendPersonalizedMessages() {\n        const messageText = document.getElementById('personalizedMessage').value;\n        \n        if (!messageText.trim()) {\n            this.showAlert('Please enter a message', 'warning');\n            return;\n        }\n        \n        if (this.contacts.length === 0) {\n            this.showAlert('No contacts available', 'warning');\n            return;\n        }\n        \n        // Show confirmation\n        if (!confirm(`Send personalized messages to ${this.contacts.length} contact(s)?`)) {\n            return;\n        }\n        \n        const sendBtn = document.getElementById('sendPersonalizedBtn');\n        const originalText = sendBtn.innerHTML;\n        sendBtn.innerHTML = '<i class=\"fas fa-spinner fa-spin\"></i> Sending...';\n        sendBtn.disabled = true;\n        \n        try {\n            let successCount = 0;\n            let failCount = 0;\n            \n            for (const contact of this.contacts) {\n                try {\n                    const personalizedMessage = this.replaceTokens(messageText, contact);\n                    \n                    // Send via socket or API\n                    await this.sendMessage(contact.number, personalizedMessage);\n                    successCount++;\n                    \n                    // Add delay between messages\n                    await this.delay(1000);\n                } catch (error) {\n                    console.error(`Failed to send to ${contact.number}:`, error);\n                    failCount++;\n                }\n            }\n            \n            this.showAlert(\n                `Messages sent successfully: ${successCount}, Failed: ${failCount}`,\n                successCount > 0 ? 'success' : 'danger'\n            );\n            \n        } catch (error) {\n            console.error('Error sending personalized messages:', error);\n            this.showAlert('Error sending messages', 'danger');\n        } finally {\n            sendBtn.innerHTML = originalText;\n            sendBtn.disabled = false;\n        }\n    }\n\n    async sendMessage(number, message) {\n        return new Promise((resolve, reject) => {\n            if (window.socket) {\n                window.socket.emit('sendMessage', {\n                    number: number,\n                    message: message\n                }, (response) => {\n                    if (response && response.success) {\n                        resolve(response);\n                    } else {\n                        reject(new Error(response?.error || 'Unknown error'));\n                    }\n                });\n            } else {\n                reject(new Error('Socket not available'));\n            }\n        });\n    }\n\n    delay(ms) {\n        return new Promise(resolve => setTimeout(resolve, ms));\n    }\n\n    updateContacts(contacts) {\n        this.contacts = contacts;\n        this.populateContactSelector();\n        this.updateStats();\n    }\n\n    populateContactSelector() {\n        const selector = document.getElementById('contactSelector');\n        if (!selector) return;\n        \n        selector.innerHTML = '<option value=\"\">Select a contact...</option>';\n        \n        this.contacts.forEach(contact => {\n            const option = document.createElement('option');\n            option.value = contact.id;\n            option.textContent = contact.name || contact.number;\n            selector.appendChild(option);\n        });\n    }\n\n    // Template Management\n    loadTemplates() {\n        try {\n            const savedTemplates = localStorage.getItem('whatsapp-templates');\n            if (savedTemplates) {\n                this.templates = JSON.parse(savedTemplates);\n                this.displayTemplates();\n            }\n        } catch (error) {\n            console.error('Error loading templates:', error);\n        }\n    }\n\n    saveTemplates() {\n        try {\n            localStorage.setItem('whatsapp-templates', JSON.stringify(this.templates));\n        } catch (error) {\n            console.error('Error saving templates:', error);\n        }\n    }\n\n    addTemplate(name, content) {\n        const template = {\n            id: Date.now().toString(),\n            name: name,\n            content: content,\n            created: new Date().toISOString()\n        };\n        \n        this.templates.push(template);\n        this.saveTemplates();\n        this.displayTemplates();\n    }\n\n    displayTemplates() {\n        const container = document.getElementById('templatesList');\n        if (!container) return;\n        \n        container.innerHTML = '';\n        \n        if (this.templates.length === 0) {\n            container.innerHTML = '<p class=\"text-muted small\">No templates saved</p>';\n            return;\n        }\n        \n        this.templates.forEach(template => {\n            const div = document.createElement('div');\n            div.className = 'border rounded p-2 mb-2';\n            div.innerHTML = `\n                <div class=\"d-flex justify-content-between align-items-start\">\n                    <div class=\"flex-grow-1\">\n                        <h6 class=\"mb-1\">${template.name}</h6>\n                        <p class=\"small text-muted mb-1\">${template.content.substring(0, 50)}${template.content.length > 50 ? '...' : ''}</p>\n                    </div>\n                    <div class=\"btn-group btn-group-sm\">\n                        <button class=\"btn btn-outline-primary\" onclick=\"personalizationManager.useTemplate('${template.content.replace(/'/g, '\\\\'')}')\"\n                                title=\"Use Template\">\n                            <i class=\"fas fa-play\"></i>\n                        </button>\n                        <button class=\"btn btn-outline-danger\" onclick=\"personalizationManager.deleteTemplate('${template.id}')\"\n                                title=\"Delete Template\">\n                            <i class=\"fas fa-trash\"></i>\n                        </button>\n                    </div>\n                </div>\n            `;\n            container.appendChild(div);\n        });\n    }\n\n    useTemplate(content) {\n        const textarea = document.getElementById('personalizedMessage');\n        if (textarea) {\n            textarea.value = content;\n            this.updatePreview();\n            this.updateStats();\n        }\n    }\n\n    deleteTemplate(id) {\n        this.templates = this.templates.filter(t => t.id !== id);\n        this.saveTemplates();\n        this.displayTemplates();\n    }\n\n    showAlert(message, type = 'info') {\n        const alert = document.createElement('div');\n        alert.className = `alert alert-${type} alert-dismissible fade show position-fixed`;\n        alert.style.cssText = 'top: 20px; right: 20px; z-index: 9999; min-width: 300px;';\n        alert.innerHTML = `\n            ${message}\n            <button type=\"button\" class=\"btn-close\" data-bs-dismiss=\"alert\"></button>\n        `;\n        \n        document.body.appendChild(alert);\n        \n        setTimeout(() => {\n            if (alert.parentNode) {\n                alert.remove();\n            }\n        }, 5000);\n    }\n}\n\n// Initialize PersonalizationManager when DOM is loaded\nlet personalizationManager;\ndocument.addEventListener('DOMContentLoaded', () => {\n    personalizationManager = new PersonalizationManager();\n    window.personalizationManager = personalizationManager; // Make available globally\n});"